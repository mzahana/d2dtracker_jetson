# Dockerfile for setting up d2dtracker dependecies

ARG BASE_IMAGE
FROM ${BASE_IMAGE}

RUN mkdir -p ${ROS_ROOT}/src

# Avoid setup.py and easy_install deprecation warnings caused by colcon and setuptools
# https://github.com/colcon/colcon-core/issues/454
ENV PYTHONWARNINGS=ignore:::setuptools.command.install,ignore:::setuptools.command.easy_install,ignore:::pkg_resources
RUN echo "Warning: Using the PYTHONWARNINGS environment variable to silence setup.py and easy_install deprecation warnings caused by colcon"

# Add ROS 2 apt repository
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2-testing/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Restore using the default Humble DDS middleware: FastRTPS
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp
# download ROS sources
# https://answers.ros.org/question/325245/minimal-ros2-installation/?answer=325249#post-id-325249
RUN cd ${ROS_ROOT} \
    && rosinstall_generator --deps --rosdistro ${ROS_DISTRO} \
	diagnostic_updater  \
    > ros2.${ROS_DISTRO}.rosinstall \
    && cat ros2.${ROS_DISTRO}.rosinstall
RUN cd ${ROS_ROOT}  \
    && vcs import src < ros2.${ROS_DISTRO}.rosinstall

 # https://github.com/dusty-nv/jetson-containers/issues/181
RUN rm -r ${ROS_ROOT}/src/ament_cmake \
    && git -C ${ROS_ROOT}/src/ clone https://github.com/ament/ament_cmake -b ${ROS_DISTRO}   

# skip installation of some conflicting packages
RUN SKIP_KEYS="fastcdr rti-connext-dds-6.0.1 rti-connext-dds-5.3.1 urdfdom_headers libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv" \
    && cd ${ROS_ROOT}  \
    && rosdep update \
    && rosdep install -y \
        --ignore-src \
        --from-paths src \
        --rosdistro ${ROS_DISTRO} \
        --skip-keys "$SKIP_KEYS"

RUN cd ${ROS_ROOT}  \
    && colcon build \
	--merge-install \
	--cmake-args -DCMAKE_BUILD_TYPE=Release 
    
# remove build files
RUN cd ${ROS_ROOT}  \
    && rm -rf ${ROS_ROOT}/src \
    && rm -rf ${ROS_ROOT}/logs \
    && rm -rf ${ROS_ROOT}/build \
    && rm ${ROS_ROOT}/*.rosinstall
    
# cleanup apt   
RUN cd ${ROS_ROOT}  \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# # Disable terminal interaction for apt
# ENV DEBIAN_FRONTEND=noninteractive
# ENV SHELL /bin/bash
# SHELL ["/bin/bash", "-c"]

# # Fundamentals
# RUN apt-get update && apt-get install -y \
#     bash-completion \
#     nano \
#     build-essential \
#     curl \
#     git \
#     iputils-ping \
#     lsb-release \
#     sudo \
#     tar \
#     unzip \
#     vim \
#     wget \
#     libgoogle-glog-dev \
#     software-properties-common \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean

# # Upgrade cmake to 3.23.2
# RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null \
#     && echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null \
#     && apt-get update \
#     && rm /usr/share/keyrings/kitware-archive-keyring.gpg \
#     && apt-get install -y kitware-archive-keyring \
#     && apt-get remove -y cmake && apt-get purge -y cmake && apt-get remove -y cmake-data && apt-get purge -y cmake \
#     && apt-get install -y cmake=3.23.2-0kitware1ubuntu20.04.1 cmake-data=3.23.2-0kitware1ubuntu20.04.1 \
#     && cmake --version \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean

# # Set Python3 as default
# RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

# # Python basics
# RUN apt-get update && apt-get install -y \
#         python3-dev \
#         python3-flake8 \
#         python3-pip \
#         python3-pytest-cov \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean

#
# Realsense
#
# Dockerfile for setting up Realsense driver
#  https://github.com/jetsonhacks/installRealSenseSDK
COPY scripts/build-librealsense.sh /opt/realsense/build-librealsense.sh
COPY scripts/install-realsense-dependencies.sh /opt/realsense/install-realsense-dependencies.sh

RUN chmod +x /opt/realsense/install-realsense-dependencies.sh && /opt/realsense/install-realsense-dependencies.sh
RUN chmod +x /opt/realsense/build-librealsense.sh && /opt/realsense/build-librealsense.sh

# Copy hotplug script which will get invoked whenever a devices plugged or un-plugged
RUN mkdir -p /opt/realsense/
COPY scripts/hotplug-realsense.sh /opt/realsense/hotplug-realsense.sh

# Copy custom udev rules file
COPY udev_rules/99-realsense-libusb-custom.rules /etc/udev/rules.d/99-realsense-libusb-custom.rules


#
# Setup XRCE-DDS Agent & Client
# Can not use snap inside docker :(
# RUN snap install micro-xrce-dds-agent --edge
RUN git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git \
    && cd Micro-XRCE-DDS-Agent \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make \
    && make install \
    && ldconfig /usr/local/lib/


# #
# # Install yolov8
# #
# # Downloads to user config dir
# ADD https://ultralytics.com/assets/Arial.ttf https://ultralytics.com/assets/Arial.Unicode.ttf /home/admin/.config/Ultralytics/

# # Install linux packages
# # g++ required to build 'tflite_support' package
# RUN apt update \
#     && apt install --no-install-recommends -y \
#     gcc \
#     git \
#     zip \
#     curl \
#     htop \
#     libgl1-mesa-glx \
#     libglib2.0-0 \
#     libpython3-dev \
#     gnupg \
#     g++ \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean
# RUN apt update
# # RUN alias python=python3

# Create working directory
RUN mkdir -p /usr/src/ultralytics

# # Copy contents
# # COPY . /usr/src/app  (issues as not a .git directory)
RUN git clone https://github.com/ultralytics/ultralytics /usr/src/ultralytics
ADD https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt /usr/src/ultralytics/

# # Install pip packages manually for TensorRT compatibility https://github.com/NVIDIA/TensorRT/issues/2567
# RUN python3 -m pip install --upgrade pip wheel
# RUN pip install --no-cache tqdm matplotlib pyyaml psutil pandas onnx thop "numpy==1.23"
COPY ultralytics/requirements.txt usr/src/ultralytics
RUN cd /usr/src/ultralytics \
    && pip install --no-cache .

# # Set environment variables
ENV OMP_NUM_THREADS=1

#
# Missing Net tools
RUN apt update \
    && apt install -y \
    net-tools \
    iputils-ping \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

#
# Dependencies for Arducam
# Ref: https://docs.arducam.com/Nvidia-Jetson-Camera/Multi-Camera-CamArray/quick-start/
#
RUN pip3 install v4l2-fix \
    && pip3 install jetson-stats

RUN apt update \
    && apt install -y gedit

# Copy middleware profiles
RUN mkdir -p /usr/local/share/middleware_profiles
COPY middleware_profiles/*profile.xml /usr/local/share/middleware_profiles/


# # Copy scripts
# RUN mkdir -p /usr/local/bin/scripts
# COPY scripts/ros_entrypoint.sh /ros_entrypoint.sh

# RUN  chmod +x /ros_entrypoint.sh

# RUN echo 'source /ros_entrypoint.sh' >> $HOME/.bashrc


CMD ["/bin/bash"]
