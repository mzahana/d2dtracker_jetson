# Dockerfile for setting up d2dtracker dependecies

ARG BASE_IMAGE
FROM ${BASE_IMAGE}

RUN mkdir -p ${ROS_ROOT}/src

# Avoid setup.py and easy_install deprecation warnings caused by colcon and setuptools
# https://github.com/colcon/colcon-core/issues/454
ENV PYTHONWARNINGS=ignore:::setuptools.command.install,ignore:::setuptools.command.easy_install,ignore:::pkg_resources
RUN echo "Warning: Using the PYTHONWARNINGS environment variable to silence setup.py and easy_install deprecation warnings caused by colcon"

# Add ROS 2 apt repository
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2-testing/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Restore using the default Humble DDS middleware: FastRTPS
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp
# download ROS sources
# https://answers.ros.org/question/325245/minimal-ros2-installation/?answer=325249#post-id-325249
RUN cd ${ROS_ROOT} \
    && rosinstall_generator --deps --rosdistro ${ROS_DISTRO} \
	diagnostic_updater  \
    > ros2.${ROS_DISTRO}.rosinstall \
    && cat ros2.${ROS_DISTRO}.rosinstall
RUN cd ${ROS_ROOT}  \
    && vcs import src < ros2.${ROS_DISTRO}.rosinstall

 # https://github.com/dusty-nv/jetson-containers/issues/181
RUN rm -r ${ROS_ROOT}/src/ament_cmake \
    && git -C ${ROS_ROOT}/src/ clone https://github.com/ament/ament_cmake -b ${ROS_DISTRO}   

# skip installation of some conflicting packages
RUN SKIP_KEYS="fastcdr rti-connext-dds-6.0.1 rti-connext-dds-5.3.1 urdfdom_headers libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv" \
    && cd ${ROS_ROOT}  \
    && rosdep update \
    && rosdep install -y \
        --ignore-src \
        --from-paths src \
        --rosdistro ${ROS_DISTRO} \
        --skip-keys "$SKIP_KEYS"

RUN cd ${ROS_ROOT}  \
    && colcon build \
	--merge-install \
	--cmake-args -DCMAKE_BUILD_TYPE=Release 
    
# remove build files
RUN cd ${ROS_ROOT}  \
    && rm -rf ${ROS_ROOT}/src \
    && rm -rf ${ROS_ROOT}/logs \
    && rm -rf ${ROS_ROOT}/build \
    && rm ${ROS_ROOT}/*.rosinstall
    
# cleanup apt   
RUN cd ${ROS_ROOT}  \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# # Disable terminal interaction for apt
# ENV DEBIAN_FRONTEND=noninteractive
# ENV SHELL /bin/bash
# SHELL ["/bin/bash", "-c"]

# # Fundamentals
# RUN apt-get update && apt-get install -y \
#     bash-completion \
#     nano \
#     build-essential \
#     curl \
#     git \
#     iputils-ping \
#     lsb-release \
#     sudo \
#     tar \
#     unzip \
#     vim \
#     wget \
#     libgoogle-glog-dev \
#     software-properties-common \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean

# # Upgrade cmake to 3.23.2
# RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null \
#     && echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null \
#     && apt-get update \
#     && rm /usr/share/keyrings/kitware-archive-keyring.gpg \
#     && apt-get install -y kitware-archive-keyring \
#     && apt-get remove -y cmake && apt-get purge -y cmake && apt-get remove -y cmake-data && apt-get purge -y cmake \
#     && apt-get install -y cmake=3.23.2-0kitware1ubuntu20.04.1 cmake-data=3.23.2-0kitware1ubuntu20.04.1 \
#     && cmake --version \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean

# # Set Python3 as default
# RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

# # Python basics
# RUN apt-get update && apt-get install -y \
#         python3-dev \
#         python3-flake8 \
#         python3-pip \
#         python3-pytest-cov \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean

#
# Realsense
#
# Dockerfile for setting up Realsense driver
#  https://github.com/jetsonhacks/installRealSenseSDK
COPY scripts/build-librealsense.sh /opt/realsense/build-librealsense.sh
COPY scripts/install-realsense-dependencies.sh /opt/realsense/install-realsense-dependencies.sh

RUN chmod +x /opt/realsense/install-realsense-dependencies.sh && /opt/realsense/install-realsense-dependencies.sh
RUN chmod +x /opt/realsense/build-librealsense.sh && /opt/realsense/build-librealsense.sh

# Copy hotplug script which will get invoked whenever a devices plugged or un-plugged
RUN mkdir -p /opt/realsense/
COPY scripts/hotplug-realsense.sh /opt/realsense/hotplug-realsense.sh

# Copy custom udev rules file
COPY udev_rules/99-realsense-libusb-custom.rules /etc/udev/rules.d/99-realsense-libusb-custom.rules


#
# Setup XRCE-DDS Agent & Client
# Can not use snap inside docker :(
# RUN snap install micro-xrce-dds-agent --edge
RUN git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git \
    && cd Micro-XRCE-DDS-Agent \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make \
    && make install \
    && ldconfig /usr/local/lib/


# #
# # Install yolov8
# #
# # Downloads to user config dir
# ADD https://ultralytics.com/assets/Arial.ttf https://ultralytics.com/assets/Arial.Unicode.ttf /home/admin/.config/Ultralytics/

# # Install linux packages
# # g++ required to build 'tflite_support' package
# RUN apt update \
#     && apt install --no-install-recommends -y \
#     gcc \
#     git \
#     zip \
#     curl \
#     htop \
#     libgl1-mesa-glx \
#     libglib2.0-0 \
#     libpython3-dev \
#     gnupg \
#     g++ \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean
# RUN apt update
# # RUN alias python=python3

# Create working directory
RUN mkdir -p /usr/src/ultralytics

# # Copy contents
# # COPY . /usr/src/app  (issues as not a .git directory)
RUN git clone https://github.com/ultralytics/ultralytics /usr/src/ultralytics
ADD https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt /usr/src/ultralytics/

# # Install pip packages manually for TensorRT compatibility https://github.com/NVIDIA/TensorRT/issues/2567
# RUN python3 -m pip install --upgrade pip wheel
# RUN pip install --no-cache tqdm matplotlib pyyaml psutil pandas onnx thop "numpy==1.23"
COPY ultralytics/requirements.txt usr/src/ultralytics
RUN cd /usr/src/ultralytics \
    && pip install --no-cache .

# # Set environment variables
ENV OMP_NUM_THREADS=1

#
# Missing Net tools
RUN apt update \
    && apt install -y \
    net-tools \
    iputils-ping \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

#
# Dependencies for Arducam
# Ref: https://docs.arducam.com/Nvidia-Jetson-Camera/Multi-Camera-CamArray/quick-start/
#
RUN pip3 install v4l2-fix \
    && pip3 install jetson-stats

RUN apt update \
    && apt install -y gedit

# Copy middleware profiles
RUN mkdir -p /usr/local/share/middleware_profiles
COPY middleware_profiles/*profile.xml /usr/local/share/middleware_profiles/

#--------------------- For Nvdia isaac ------------------------
# sklearn dependencies
RUN apt-get update && apt-get install -y \
    gfortran \
    libatlas-base-dev \
    python3-scipy \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# sklearn Python dependencies
RUN python3 -m pip install -U \
    Cython \
    wheel

# Install sklearn
RUN python3 -m pip install -U \
    scikit-learn

# Install Git-LFS
RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \
        apt-get update && apt-get install -y \
        git-lfs \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# Install TensorRT and VPI
RUN apt-get update && apt-get install -y \
    tensorrt \
    vpi2-dev \
&& rm -rf /var/lib/apt/lists/* && apt-get clean

# Install tao-converter
COPY tao/tao-converter-aarch64-tensorrt8.4.zip /opt/nvidia/tao/tao-converter-aarch64-tensorrt8.4.zip
RUN mkdir -p /opt/nvidia/tao && \
    cd /opt/nvidia/tao && \
    unzip -j tao-converter-aarch64-tensorrt8.4.zip -d /opt/nvidia/tao/jp5 && \
    chmod 755 $(find /opt/nvidia/tao -name "tao-converter") && \
    ln -sf $(find /opt/nvidia/tao -name "tao-converter")  /opt/nvidia/tao/tao-converter && \
    rm tao-converter-aarch64-tensorrt8.4.zip

ENV PATH="${PATH}:/opt/nvidia/tao"

# Update environment
ENV LD_LIBRARY_PATH="/opt/nvidia/vpi2/lib64:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/usr/lib/aarch64-linux-gnu/tegra:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda-11.4/targets/aarch64-linux/lib:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/usr/lib/aarch64-linux-gnu/tegra-egl:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/usr/lib/aarch64-linux-gnu/tegra/weston:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/lib/aarch64-linux-gnu-host"
ENV PATH="${PATH}:/usr/local/cuda/bin"

# https://forums.developer.nvidia.com/t/error-importerror-usr-lib-aarch64-linux-gnu-libgomp-so-1-cannot-allocate-memory-in-static-tls-block-i-looked-through-available-threads-already/166494/3
ENV LD_PRELOAD="/usr/lib/aarch64-linux-gnu/libgomp.so.1"

# PyTorch (NV CUDA edition)
# https://docs.nvidia.com/deeplearning/frameworks/install-pytorch-jetson-platform/index.html
RUN python3 -m pip install --no-cache \
        https://developer.download.nvidia.cn/compute/redist/jp/v50/pytorch/torch-1.13.0a0+340c4120.nv22.06-cp38-cp38-linux_aarch64.whl

# Install Triton server 2.24 from https://github.com/triton-inference-server/server/releases/tag/v2.24.0
RUN apt-get update && apt-get install -y --no-install-recommends \
    autoconf \
    automake \
    libb64-dev \
    libcurl4-openssl-dev \
    libopenblas-dev \
    libre2-dev \
    libssl-dev \
    libtool \
    patchelf \
    rapidjson-dev \
    zlib1g-dev \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

RUN mkdir -p /opt/tritonserver && cd /opt/tritonserver \
    && wget https://github.com/triton-inference-server/server/releases/download/v2.24.0/tritonserver2.24.0-jetpack5.0.2.tgz \
    && tar -xzvf tritonserver2.24.0-jetpack5.0.2.tgz \
    && rm tritonserver2.24.0-jetpack5.0.2.tgz

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/tritonserver/lib"

# Add MQTT binaries and libraries
RUN apt-add-repository ppa:mosquitto-dev/mosquitto-ppa \
    && apt-get update && apt-get install -y \
        mosquitto \
        mosquitto-clients \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# Note: VPN cannot be on for pymongo download
RUN python3 -m pip install -U \
  pymongo \
  paho-mqtt

# Core dev libraries
RUN apt-get update && apt-get install -y \
        libasio-dev \
        libbullet-dev \
        libtinyxml2-dev \
        libcunit1-dev \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# NPP library
RUN apt-get update && apt-get install -y --no-install-recommends \
        libnpp-dev-11-4 \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# Upgrade libc to resolve vulnerabilities including CVE-2019-11477
RUN apt-get update && apt-get install -y --only-upgrade \
       linux-libc-dev \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# Downgrade protobuf
RUN python3 -m pip install \
        protobuf==3.20.1

# Apply libcudacxx patch for fixing C++17 compilation errors in GXF
COPY patches/libcudacxx_aarch64_cuda_11_4.diff /tmp/
RUN patch -i /tmp/libcudacxx_aarch64_cuda_11_4.diff /usr/local/cuda-11.4/targets/aarch64-linux/include/cuda/std/detail/libcxx/include/cmath

# ------------------------------------------------

# Install negotiated
RUN apt-get update && mkdir -p ${ROS_ROOT}/src && cd ${ROS_ROOT}/src \
    && git clone https://github.com/osrf/negotiated && cd negotiated && git checkout master && cd .. \
    && source ${ROS_ROOT}/install/setup.bash && cd ${ROS_ROOT} \
    && rosdep install -y -r --ignore-src --from-paths src --rosdistro ${ROS_DISTRO} \
    && colcon build --merge-install --cmake-args -DCMAKE_BUILD_TYPE=Release --packages-up-to-regex negotiated* \
    && rm -Rf src build log \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# Install vda5050_msgs
RUN apt-get update && mkdir -p ${ROS_ROOT}/src && cd ${ROS_ROOT}/src \
    && git clone https://github.com/ipa320/vda5050_msgs.git vda5050_root \
    && cd vda5050_root && git checkout ros2 && cd .. \
    && mv vda5050_root/vda5050_msgs/ vda5050_msgs \
    && rm -rf vda5050_root \
    && source ${ROS_ROOT}/install/setup.bash && cd ${ROS_ROOT} \
    && colcon build --merge-install --cmake-args -DCMAKE_BUILD_TYPE=Release --packages-up-to vda5050_msgs \
    && rm -Rf src build log \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# # Copy scripts
# RUN mkdir -p /usr/local/bin/scripts
# COPY scripts/ros_entrypoint.sh /ros_entrypoint.sh

# RUN  chmod +x /ros_entrypoint.sh

# RUN echo 'source /ros_entrypoint.sh' >> $HOME/.bashrc


CMD ["/bin/bash"]
